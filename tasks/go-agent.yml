---
- name: yum install go-agent
  sudo: yes
  yum: pkg=go-agent-{{ GOCD_GO_VERSION }} state=installed
  when: ansible_pkg_mgr=='yum'

- name: apt install go-agent
  sudo: yes
  apt: pkg=go-agent={{ GOCD_GO_VERSION }} state=present force=yes
  when: ansible_pkg_mgr=='apt'
  # notify:
  # - restart go-agent

# We don't use the RPM/DEB bundle agent service as it's not really designed for running multiple agents concurrently.
# Once Go source is available we hope to change it's service to be mult-agent by default, and this logic will be removed.
- name: ensure legacy go-agent service is disabled
  sudo: yes
  action: command /sbin/chkconfig --del go-agent removes=/etc/init.d/go-agent
  when: ansible_pkg_mgr=='yum'

- name: ensure legacy go-agent service is removed
  sudo: yes
  file: path=/etc/init.d/go-agent state=absent

- name: ensure legacy go-agent working directory is removed
  sudo: yes
  file: path=/var/lib/go-agent state=absent

- debug: msg="{{ ansible_processor_count }} CPUs with {{ ansible_processor_cores }} cores detected.  {{ GOCD_AGENT_INSTANCES }} agents will be installed."

- name: Creating additional agents - directory structure.
  file: path="/var/lib/go-agent{{item}}" mode=0755 owner=go group=go state=directory
  sudo: yes
  with_sequence: "count={{ GOCD_AGENT_INSTANCES }}"

- file: path="/var/lib/go-agent{{item}}/config" mode=0755 owner=go group=go state=directory
  sudo: yes
  with_sequence: "count={{ GOCD_AGENT_INSTANCES }}"

- name: Creating additional agents - defaults.
  template: "src=go-agent-defaults dest=/etc/default/go-agent{{ item }} mode=0644 owner=root group=root"
  sudo: yes
  with_sequence: "count={{ GOCD_AGENT_INSTANCES }}"

- name: Creating additional agents - service.
  template: "src=go-agent-service dest=/etc/init.d/go-agent{{ item }} mode=0755 owner=root group=root"
  sudo: yes
  with_sequence: "count={{ GOCD_AGENT_INSTANCES }}"

- name: Creating additional agents - bash script.
  template: "src=go-agent-sh dest=/usr/share/go-agent/agent{{ item }}.sh mode=0755 owner=root group=root"
  sudo: yes
  with_sequence: "count={{ GOCD_AGENT_INSTANCES }}"

- name: Ensure Go-agents are started and run on startup.
  service: "name=go-agent{{ item }} state=started enabled=yes"
  sudo: yes
  with_sequence: "count={{ GOCD_AGENT_INSTANCES }}"

- name: install netcat (nc)
  sudo: yes
  yum: name=nc state=present

- name: create .ssh dir
  sudo: yes
  sudo_user: "{{GOCD_USER}}"
  file: path="{{GOCD_USER_HOME}}/.ssh"
        state=directory
        mode=0700

- name: create authorized_keys file
  sudo: yes
  sudo_user: "{{GOCD_USER}}"
  file: path="{{GOCD_USER_HOME}}/.ssh/authorized_keys"
        owner="{{GOCD_USER}}"
        state=touch
        mode=0600

- name: ensure github is in known hosts
  lineinfile: dest="{{GOCD_USER}}/.ssh/authorized_keys"
              line="{{ lookup('file', 'files/github_rsa.pub' )}}"

# - name: ensure github is in known hosts
#   sudo: yes
#   sudo_user: "{{GOCD_USER}}"
#   authorized_key: user="{{GOCD_USER}}"
#                   key="{{ lookup('file', 'files/github_rsa.pub' )}}"
#                   path="{{GOCD_USER_HOME}}/.ssh/authorized_keys"
#                   manage_dir=yes

# - name: checkout ops scripts
#   sudo: yes
#   sudo_user: "{{GOCD_USER}}"
#   git: "repo=ssh:git@github.com:lampo/everydollar-ops-go-shell-scripts.git dest=/home/{{ GOCD_USER }}/scripts"
#

- include: maven-settings.yml
- include: go-scripts.yml
- include: aws-cli.yml

- name: install bna gem
  sudo: yes
  gem: name=bna state=present repository={{ lookup('env','RUBYGEMS_SOURCE_URL') }} user_install=false

- name: symlink bna gem in /usr/bin
  sudo: yes
  file: dest=/usr/bin/bna
        src=/opt/rubies/ruby-2.1.3/bin/bna
        state=link

