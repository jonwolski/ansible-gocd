---
- name: 'Fail if not using Apt or Yum.  Do a manual install for now :-('
  fail: msg='This role only supports Yum or Apt package managers at the moment.  Please do a manual install instead.'
  when: ansible_pkg_mgr != 'yum' and ansible_pkg_mgr != 'apt'

- name: yum install some basic dependencies
  sudo: yes
  yum: name={{ item }} state=present
  with_items:
   - unzip
   - which
  when: ansible_pkg_mgr == 'yum'

- name: apt install some basic dependencies. Must be installed before repo.
  sudo: yes
  apt: name={{ item }} state=present update_cache=true
  with_items:
   - python-pycurl
   - unzip
  when: ansible_pkg_mgr == 'apt'

- name: determine JAVA_HOME
  shell: find /usr/java -type d -name *1.8* | tail -n1
  register: system_java_home

- name: set GOCD_JAVA_HOME
  set_fact:
     GOCD_JAVA_HOME: "{{ system_java_home.stdout }}"

- name: thoughtworks go yum repository
  sudo: yes
  copy: src=thoughtworks-go-download.repo
        dest=/etc/yum.repos.d/
        owner=root group=root mode=0644
  when: ansible_pkg_mgr == 'yum'

- name: thoughtworks go apt repository
  sudo: yes
  apt_repository: repo='deb http://download.go.cd/gocd-deb/ /' state=present
  when: ansible_pkg_mgr == 'apt'

# Note: If the user or group exists, but under another ID, Ansible will try and change it.
- name: add go group
  sudo: yes
  group: name={{ GOCD_GROUP }} state=present

- name: add go user with home at /var/go
  sudo: yes
  user: name={{ GOCD_USER }} comment="Go CD User" group={{ GOCD_GROUP }} home=/var/go

- name: create log directory
  sudo: yes
  file: path=/var/log/go-server state=directory owner={{ GOCD_USER }} group={{ GOCD_GROUP }}

- name: create run directory
  sudo: yes
  file: path=/var/run/go-server state=directory

- name: create var/libgo-server directory
  sudo: yes
  file: path=/var/lib/go-server state=directory owner={{ GOCD_USER }} group={{ GOCD_GROUP }}

- name: create etc/go directory
  sudo: yes
  file: path=/etc/go state=directory owner={{ GOCD_USER }} group={{ GOCD_GROUP }}

